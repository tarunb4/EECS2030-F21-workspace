package junit_tests;

import static org.junit.Assert.*;

import org.junit.Test;

import model.Product;

public class TestProduct {
	
	@Test
	public void test_product_1() {
		Product p = new Product();
		
		// Think of each assertion is to verify the actual value of the method call against its EXPECTED value.
		assertNull(p.getModel());
		
		assertTrue(p.getFinish() == null);
		assertFalse(p.getFinish() != null); // !(p.getFinish() == null)
		
		assertTrue(p.getStorage() == 0);
		assertEquals(0, p.getStorage()); // assertEquals(EXPECTED, ACTUAL);
		
		assertFalse(p.hasCellularConnectivity());
		assertFalse(p.hasCellularConnectivity() == true);
		assertTrue(p.hasCellularConnectivity() == false);
		assertTrue(p.hasCellularConnectivity() != true);
		assertTrue(!(p.hasCellularConnectivity() == true));
		assertTrue(!p.hasCellularConnectivity());
		
		/*
		 * Decimal numbers, when stored in the computer memory, cannot be represented in binary perfectly.
		 * Instead, we should allow for some TOLERANCE of calculated results (e.g., +/- 0.1)
		 * 
		 */
		assertEquals(0.0, p.getOriginalPrice(), 0.1);
//		assertTrue(0.0 == p.getOriginalPrice()); // not recommended; tolerance should be allowed
		assertEquals(0.0, p.getDiscountValue(), 0.1);
		assertEquals(0.0, p.getPrice(), 0.1);
		
		assertEquals("null null 0GB (cellular connectivity: false): $(0.00 - 0.00)", p.toString());
	
	}
	

}
